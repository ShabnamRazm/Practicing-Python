def hello_func():  #put our parameters in the paranthesis
    pass           #it is possible to write a function and not have any code in it but we can't leave it completely blank; but if we want to fill this function later:use==>PASS: we don't want to do anything with this for now but it won't throw any errors for leaving it blank
hello_func()       #we need to add () after the function to execute it, if we don't have(): print (hello_func)==>it'll equal to the function itself, don't execute it
print(hello_func())  #None

def hello_func():
  print('Hello Function!')
hello_func()    #Hello Function!
#One benefit of funtions: They allow use to reuse code without repeating ourselves: #DRY

def hello_func():
  return 'Hello Function!'
#when we execute our function, it's actually going to be equal to our return value. so these executed functions:
hello_func()  #are actually equall to the string: Hello Function!
#if we run this, it doesn't give us any results because it's just a string that we're not doing anything with; but:
print(hello_func())    #Hello Function!
print(hello_func().upper())

#How we can pass arguments to our function? we need to create some parameters:
def hello_func(greeting):
  return '{} Function.'.format(greeting)
#print(hello_func())==> ERROR!
print(hello_func('Hi'))  #Hi Function!
#this greeting parameter is a required argument, because it doesn't have a default value. If we had a default value, then it would just fall back to the default value whenever we didn't pass an argument in:
#we want to pass a name to our hello function and it will return a greeting and a name:
#remember that your required positional arguments have to come before your keyword arguments
def hello_func(greeting,name='You')  #if no name is passed in, then we want to have a default value of 'You'
  return '{}, {}'.format(greeting,name)
print(hello_func('Hi'))  #Hi, You  (we didn't pass in a value for the name argument when we executed this function; IF WE WANT TO PASS IN A VALUE:)
print(hello_func('Hi',name='Corey'))  #Hi, Corey

#Positional Keyword Arguments: Allowing us to accept an arbitrary number of positional or keyword arguments:
def student_info(*args,**kwargs):
  print(args)
  print(kwargs)
student_info('Math','Art',name='John',age=22)  #('Math', 'Art')  {'name': 'John', 'age': 22}
#args is actually a tuple with all of our positional arguments
#kwargs is a dictionary with all of our keyword values
#you might see a function call with arguments using * , ** ==>  it will actually unpack a sequence or dictionary and pass those values into the function individually:
#let's make a list and a dictionary of everything that we just passed into our function.
def student_info(*args,**kwargs):  #and within here to accept an arbitrary number of positinal or keyword values
  print(args)
  print(kwargs)
courses=['Math','Art']     #we want to pass all of these courses in as our positional arguments
info={'name'='John','age':22}  #and the info dictionary as our keyword arguments
#student_info(courses,info) ==> (['Math', 'Art'], {'name': 'John', 'age': 22}) {} ==>! it's not what we thought==> USE these placeholders: * , **
student_info(*courses,**info)  #now it'll unpack the values and pass them individually: ('Math', 'Art')  {'name': 'John', 'age': 22}

#Practice:
month_days=[0,31,28,31,30,31,30,31,31,30,31,30,31]
def is_leap(year):
  """Return True for leap years, False for non_leap years"""    #docstring: help document what a function or a class is supposed to do
  return year%4==0 and (year%100!=0 or year%400==0)
def days_in_month(year,month):
  '''Return number of days in that month in that year.'''
  if not 1<=month<=12:
    return 'Invalid month'
  if month==2 and is_leap(year):
    return 29
  return month_days[month]
print(is_leap(2017))  #False
print(is_leap(2020))  #True
print (days_in_month(2017,2))  #28

#python functions: 1)Built_in functions: print(), input(), type(), float(), int(),.. 
#                  2)Functions that we define ourselves and then use: def
def greet(lang):    #lang= parameter
  if lang=='es':
    print('Hola')
  elif lang=='fr':
    print('Bonjour')
  else:
    print('Hello')
greet('en')  #Hello  
greet('es')   #Hola
greet('fr')   #Bonjour    #en/es/fr= arguments

def greet():
  return 'Hello'
print(greet(),'Glenn')  #Hello Glenn
print(greet(),'Sally')  #Hello Sally

def greet(lang):
  if lang=='es':
    return 'Holla'
  elif lang=='fr':
    return 'Bonjour'
  else:
    retuen 'Hello'
print(greet('en'),'Glenn')  #Hello Glenn
print(greet('es'),'Sally')  #Holla Sally
print(greet('fr'),'Michael')  #Bonjour Michael

def addtwo(a,b):
  added=a+b
  return added
x=addtwo(3,5)
print(x)   #8

#Rewrite your pay computation with time-and-a-half for over-time and create a function called computepay which takes two parameters (hours and rate).
def computepay(hours,rate):
    if hours<=40:
        xp=hours*rate
    else:
        xp=(hours*rate)+((hours-40)*(rate*0.5))
    return xp

hr=input('Enter hours:')
ra=input('Enter rate:')

try:
    fhr=float(hr)
    fra=float(ra)
except:
    print('Invalid')
    quit()
pay=computepay(fhr,fra)
print('Pay: ',pay)
